import typing as t
import dash_mantine_components as dmc

from datetime import datetime
from dash import (
    clientside_callback,
    ClientsideFunction,
    Dash,
    html,
    dcc,
    callback,
    Output,
    Input,
    State,
    no_update,
)
from dash_iconify import DashIconify
from dash_app.quotes import get_question_pairs


QUOTES_PER_DAY = 10
HIDE = {"display": "none"}
DISPLAY = {"display": "block"}
CARD_STYLE = {"minHeight": "30vh"}


app = Dash(__name__)
server = app.server


initial_content = dmc.Stack(
    [
        dmc.Container(
            dmc.Paper(
                """
                You will be presented with two quotes. One of the quotes
                is from a real person, and the other one is generated by
                ChatGPT. Your task is to guess which one is AI!
                """,
                radius="xl",
                p="xl",
                shadow="md",
                withBorder=True,
            )
        ),
        dmc.Button(
            "Let's go!",
            id="acknowledge-button",
            size="md",
            radius="xl",
            color="dark",
            rightIcon=DashIconify(icon="icon-park-solid:next"),
        ),
    ],
    align="center",
    mx=20,
    id="initial-content",
)


content = dmc.Stack(
    [
        dmc.Container(
            [
                dmc.Card(
                    children=[
                        dmc.Container(
                            dmc.Blockquote(id="quote-0"),
                        ),
                        dmc.Center(
                            dmc.Chip(
                                DashIconify(icon="twemoji:robot"),
                                id="select-0",
                                size="xl",
                            ),
                        ),
                    ],
                    id="card-0",
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    style=CARD_STYLE,
                ),
                dmc.Space(h=10),
                dmc.Card(
                    children=[
                        dmc.Container(
                            dmc.Blockquote(id="quote-1"),
                        ),
                        dmc.Center(
                            dmc.Chip(
                                DashIconify(icon="twemoji:robot"),
                                id="select-1",
                                size="xl",
                            ),
                        ),
                    ],
                    id="card-1",
                    withBorder=True,
                    shadow="sm",
                    radius="md",
                    style=CARD_STYLE,
                ),
            ]
        ),
        dmc.Space(h=10),
        dmc.Container(
            dmc.Stack(
                [
                    dmc.Button(
                        "Submit",
                        disabled=True,
                        id="submit-button",
                        size="xl",
                        radius="xl",
                        rightIcon=DashIconify(icon="formkit:submit"),
                    ),
                    dmc.Progress(
                        id="progress-bar",
                        value=0,
                        size="xl",
                        radius="xl",
                        animate=True,
                    ),
                ]
            ),
        ),
        dmc.Space(h=10),
    ],
    align="center",
    id="main-content",
    style=HIDE,
)


end_content = dmc.Card(
    children=[
        dmc.Container(
            [
                dmc.Text(
                    "Thanks for playing! You've hit the end for today."
                    " Come back tomorrow for more."
                ),
                dmc.Space(h=10),
                html.Div(id="results-div"),
            ],
        ),
        dmc.Space(h=20),
        dmc.Center(
            dmc.Button(
                id="end-button",
                children="Retry",
                rightIcon=DashIconify(icon="carbon:reset-alt"),
                size="md",
                radius="xl",
                color="dark",
            ),
        ),
    ],
    id="end-content",
    withBorder=True,
    shadow="sm",
    radius="md",
    mx=20,
    style=HIDE,
)


app.layout = dmc.MantineProvider(
    theme={"colorScheme": "light", "fontFamily": "'Inter', sans-serif"},
    children=dmc.Center(
        dmc.Stack(
            [
                dcc.Store(id="game-state", storage_type="local"),
                dmc.Space(h=10),
                dmc.Image(
                    src="/assets/logo.png", height="104px", width="177px"
                ),
                dmc.LoadingOverlay(
                    html.Div(id="loading-content", children=initial_content),
                    loaderProps={"variant": "dots", "size": "xl"},
                ),
                content,
                end_content,
                dmc.Space(h=5),
            ],
            align="center",
        ),
    ),
    inherit=True,
    withGlobalStyles=True,
    withNormalizeCSS=True,
)


@callback(
    Output("initial-content", "style"),
    Output("main-content", "style"),
    Output("game-state", "data"),
    Input("acknowledge-button", "n_clicks"),
    State("game-state", "data"),
    prevent_initial_call=True,
)
def load_game_state(acknowledge_clicks, game_state):
    """
    Callback function for initializing or loading the game state
    and transitioning out of the introduction frame.

    Args:
        acknowledge_clicks (int): The number of times the acknowledge-button
                has been clicked.
        game_state (dict): The game-state stored in local storage containing
            the user's progress.

    Returns:
        tuple: A tuple containing the updated styles for the initial content
            and main content elements, and the updated game state.
    """
    output_initial = HIDE
    output_main = DISPLAY

    time_now = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%f")
    timestamp = (
        time_now if not game_state else game_state.get("created_at", time_now)
    )
    dt = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%f")
    next_day = dt.date() < datetime.utcnow().date()

    if next_day or not game_state:
        """
        even = pending answer
        odd = result
        """
        game_state = {
            "created_at": datetime.utcnow(),
            "current_frame": 0,
            "question_pairs": get_question_pairs(),
            "results": [None] * QUOTES_PER_DAY,
        }

    return output_initial, output_main, game_state


@callback(
    Output("results-div", "children"),
    Input("game-state", "data"),
    prevent_initial_call=True,
)
def load_results_div(game_state):
    """
    Callback function for loading and displaying the results div.

    Args:
        game_state (dict): The game-state stored in local storage containing
            the user's progress.

    Returns:
        tuple or dash.no_update: End frame when game is over.
            Otherwise, dash.no_update to prevent unnecessary updates.
    """
    def _get_results_div(results):
        num_correct = sum([result[1] for result in results])
        percentage = int((100 * num_correct) / QUOTES_PER_DAY)
        return dmc.Stack(
            [
                dmc.RingProgress(
                    sections=[{"value": percentage, "color": "indigo"}],
                    label=dmc.Center(
                        dmc.Text(f"{percentage}%", color="indigo")
                    ),
                ),
                dmc.Alert(
                    f"You got {num_correct} out of {QUOTES_PER_DAY}"
                    " quotes correct!",
                    title="Congratulations!",
                    color="green",
                ),
            ],
            align="center",
        )

    if game_state:
        current_frame = game_state["current_frame"]
        if current_frame >= (QUOTES_PER_DAY * 2):
            return _get_results_div(game_state["results"])

    return no_update


clientside_callback(
    ClientsideFunction(
        namespace="clientside",
        function_name="load_next_frame_function",
    ),
    Output("quote-0", "children"),
    Output("quote-1", "children"),
    Output("quote-0", "cite"),
    Output("quote-1", "cite"),
    Output("card-0", "style"),
    Output("card-1", "style"),
    Output("submit-button", "style"),
    Output("progress-bar", "value"),
    Output("end-content", "style"),
    Output("game-state", "data", allow_duplicate=True),
    Input("initial-content", "style"),
    Input("submit-button", "n_clicks"),
    Input("end-button", "n_clicks"),
    State("game-state", "data"),
    State("select-0", "checked"),
    State("select-1", "checked"),
    prevent_initial_call=True,
)


clientside_callback(
    ClientsideFunction(
        namespace="clientside",
        function_name="update_button_state_function",
    ),
    Output("submit-button", "children"),
    Output("submit-button", "disabled"),
    Output("select-0", "checked"),
    Output("select-1", "checked"),
    Output("select-0", "style"),
    Output("select-1", "style"),
    Input("select-0", "checked"),
    Input("select-1", "checked"),
    Input("game-state", "data"),
)


if __name__ == "__main__":
    app.run_server(debug=True)
